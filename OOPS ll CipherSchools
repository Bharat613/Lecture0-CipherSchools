#include <iostream>

// Base class
class Shape {
public:
    // Virtual function for calculating area
    virtual double calculateArea() const {
        return 0.0;
    }
};

// Derived class 1
class Circle : public Shape {
private:
    double radius;

public:
    Circle(double r) : radius(r) {}

    // Override the calculateArea method
    double calculateArea() const override {
        return 3.14 * radius * radius;
    }
};

// Derived class 2
class Rectangle : public Shape {
private:
    double length;
    double width;

public:
    Rectangle(double l, double w) : length(l), width(w) {}

    // Override the calculateArea method
    double calculateArea() const override {
        return length * width;
    }
};

// Function to demonstrate polymorphism
void printArea(const Shape& shape) {
    std::cout << "Area: " << shape.calculateArea() << std::endl;
}

int main() {
    // Creating objects of Circle and Rectangle
    Circle myCircle(5.0);
    Rectangle myRectangle(4.0, 6.0);

    // Calling the printArea function with different shapes
    printArea(myCircle);
    printArea(myRectangle);

    return 0;
}
